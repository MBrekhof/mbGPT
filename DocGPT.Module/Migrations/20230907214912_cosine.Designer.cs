// <auto-generated />
using System;
using System.Collections.Generic;
using DocGPT.Module.BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace DocGPT.Module.Migrations
{
    [DbContext(typeof(DocGPTEFCoreDbContext))]
    [Migration("20230907214912_cosine")]
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    partial class cosine
#pragma warning restore CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", false)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeObjectTag", b =>
                {
                    b.Property<int>("CodeObjectsCodeObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("codeobjectscodeobjectid");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("integer")
                        .HasColumnName("tagstagid");

                    b.HasKey("CodeObjectsCodeObjectId", "TagsTagId")
                        .HasName("pk_codeobjecttag");

                    b.HasIndex("TagsTagId")
                        .HasDatabaseName("ix_codeobjecttag_tagstagid");

                    b.ToTable("codeobjecttag", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.FileData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("ID")
                        .HasName("pk_filedata");

                    b.ToTable("filedata", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionId")
                        .HasColumnType("text")
                        .HasColumnName("actionid");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicyactionpermissionobject");

                    b.HasIndex("RoleID")
                        .HasDatabaseName("ix_permissionpolicyactionpermissionobject_roleid");

                    b.ToTable("permissionpolicyactionpermissionobject", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Criteria")
                        .HasColumnType("text")
                        .HasColumnName("criteria");

                    b.Property<string>("Members")
                        .HasColumnType("text")
                        .HasColumnName("members");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer")
                        .HasColumnName("readstate");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uuid")
                        .HasColumnName("typepermissionobjectid");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer")
                        .HasColumnName("writestate");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicymemberpermissionsobject");

                    b.HasIndex("TypePermissionObjectID")
                        .HasDatabaseName("ix_permissionpolicymemberpermissionsobject_typepermissionobjec~");

                    b.ToTable("permissionpolicymemberpermissionsobject", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ItemPath")
                        .HasColumnType("text")
                        .HasColumnName("itempath");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer")
                        .HasColumnName("navigatestate");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("text")
                        .HasColumnName("targettypefullname");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicynavigationpermissionobject");

                    b.HasIndex("RoleID")
                        .HasDatabaseName("ix_permissionpolicynavigationpermissionobject_roleid");

                    b.ToTable("permissionpolicynavigationpermissionobject", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Criteria")
                        .HasColumnType("text")
                        .HasColumnName("criteria");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("integer")
                        .HasColumnName("deletestate");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer")
                        .HasColumnName("navigatestate");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer")
                        .HasColumnName("readstate");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uuid")
                        .HasColumnName("typepermissionobjectid");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer")
                        .HasColumnName("writestate");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicyobjectpermissionsobject");

                    b.HasIndex("TypePermissionObjectID")
                        .HasDatabaseName("ix_permissionpolicyobjectpermissionsobject_typepermissionobjec~");

                    b.ToTable("permissionpolicyobjectpermissionsobject", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("CanEditModel")
                        .HasColumnType("boolean")
                        .HasColumnName("caneditmodel");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("boolean")
                        .HasColumnName("isadministrative");

                    b.Property<bool>("IsAllowPermissionPriority")
                        .HasColumnType("boolean")
                        .HasColumnName("isallowpermissionpriority");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PermissionPolicy")
                        .HasColumnType("integer")
                        .HasColumnName("permissionpolicy");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicyrolebase");

                    b.ToTable("permissionpolicyrolebase", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyRoleBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("CreateState")
                        .HasColumnType("integer")
                        .HasColumnName("createstate");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("integer")
                        .HasColumnName("deletestate");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer")
                        .HasColumnName("navigatestate");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer")
                        .HasColumnName("readstate");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("text")
                        .HasColumnName("targettypefullname");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer")
                        .HasColumnName("writestate");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicytypepermissionobject");

                    b.HasIndex("RoleID")
                        .HasDatabaseName("ix_permissionpolicytypepermissionobject_roleid");

                    b.ToTable("permissionpolicytypepermissionobject", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("ChangePasswordOnFirstLogon")
                        .HasColumnType("boolean")
                        .HasColumnName("changepasswordonfirstlogon");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("text")
                        .HasColumnName("storedpassword");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicyuser");

                    b.ToTable("permissionpolicyuser", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("LoginProviderName")
                        .HasColumnType("text")
                        .HasColumnName("loginprovidername");

                    b.Property<string>("ProviderUserKey")
                        .HasColumnType("text")
                        .HasColumnName("provideruserkey");

                    b.Property<Guid>("UserForeignKey")
                        .HasColumnType("uuid")
                        .HasColumnName("userforeignkey");

                    b.HasKey("ID")
                        .HasName("pk_permissionpolicyuserlogininfo");

                    b.HasIndex("UserForeignKey")
                        .HasDatabaseName("ix_permissionpolicyuserlogininfo_userforeignkey");

                    b.ToTable("permissionpolicyuserlogininfo", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("articleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("ArticleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("articlename");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("ArticleId")
                        .HasName("pk_article");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ArticleDetail", b =>
                {
                    b.Property<int>("ArticleDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("articledetailid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleDetailId"));

                    b.Property<string>("ArticleContent")
                        .HasColumnType("text")
                        .HasColumnName("articlecontent");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("articleid");

                    b.Property<int>("ArticleSequence")
                        .HasColumnType("integer")
                        .HasColumnName("articlesequence");

                    b.Property<int>("Tokens")
                        .HasColumnType("integer")
                        .HasColumnName("tokens");

                    b.Property<Vector>("VectorDataString")
                        .HasColumnType("vector(1536)")
                        .HasColumnName("vectordatastring");

                    b.HasKey("ArticleDetailId")
                        .HasName("pk_articledetail");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_articledetail_articleid");

                    b.ToTable("articledetail", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Base.FileSystemStoreObjectBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("ID")
                        .HasName("pk_filesystemstoreobjectbase");

                    b.ToTable("filesystemstoreobjectbase", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chatid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChatId"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<int?>("ChatModelID")
                        .HasColumnType("integer")
                        .HasColumnName("chatmodelid");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("PromptID")
                        .HasColumnType("integer")
                        .HasColumnName("promptid");

                    b.Property<string>("Question")
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("QuestionDataString")
                        .HasColumnType("text")
                        .HasColumnName("questiondatastring");

                    b.Property<int?>("Tokens")
                        .HasColumnType("integer")
                        .HasColumnName("tokens");

                    b.HasKey("ChatId")
                        .HasName("pk_chat");

                    b.HasIndex("ChatModelID")
                        .HasDatabaseName("ix_chat_chatmodelid");

                    b.HasIndex("PromptID")
                        .HasDatabaseName("ix_chat_promptid");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ChatModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<float?>("Tokencost")
                        .HasColumnType("real")
                        .HasColumnName("tokencost");

                    b.HasKey("ID")
                        .HasName("pk_chatmodel");

                    b.ToTable("chatmodel", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.CodeObject", b =>
                {
                    b.Property<int>("CodeObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("codeobjectid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodeObjectId"));

                    b.Property<int>("CodeObjectCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("codeobjectcategoryid");

                    b.Property<string>("CodeObjectContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codeobjectcontent");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("Tokens")
                        .HasColumnType("integer")
                        .HasColumnName("tokens");

                    b.Property<Vector>("VectorDataString")
                        .HasColumnType("vector(1536)")
                        .HasColumnName("vectordatastring");

                    b.HasKey("CodeObjectId")
                        .HasName("pk_codeobject");

                    b.HasIndex("CodeObjectCategoryId")
                        .HasDatabaseName("ix_codeobject_codeobjectcategoryid");

                    b.ToTable("codeobject", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.CodeObjectCategory", b =>
                {
                    b.Property<int>("CodeObjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("codeobjectcategoryid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodeObjectCategoryId"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.HasKey("CodeObjectCategoryId")
                        .HasName("pk_codeobjectcategory");

                    b.ToTable("codeobjectcategory", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.EmbeddingModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<float?>("Tokencost")
                        .HasColumnType("real")
                        .HasColumnName("tokencost");

                    b.HasKey("ID")
                        .HasName("pk_embeddingmodel");

                    b.ToTable("embeddingmodel", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.FileSystemStoreObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<Guid?>("FileID")
                        .HasColumnType("uuid")
                        .HasColumnName("fileid");

                    b.Property<bool?>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.HasKey("ID")
                        .HasName("pk_filesystemstoreobject");

                    b.HasIndex("FileID")
                        .HasDatabaseName("ix_filesystemstoreobject_fileid");

                    b.ToTable("filesystemstoreobject", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.MailData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<List<string>>("Bcc")
                        .HasColumnType("text[]")
                        .HasColumnName("bcc");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<List<string>>("Cc")
                        .HasColumnType("text[]")
                        .HasColumnName("cc");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<string>("From")
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<string>("ReplyTo")
                        .HasColumnType("text")
                        .HasColumnName("replyto");

                    b.Property<string>("ReplyToName")
                        .HasColumnType("text")
                        .HasColumnName("replytoname");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<List<string>>("To")
                        .HasColumnType("text[]")
                        .HasColumnName("to");

                    b.HasKey("ID")
                        .HasName("pk_maildata");

                    b.ToTable("maildata", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Prompt", b =>
                {
                    b.Property<int>("PromptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("promptid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromptID"));

                    b.Property<string>("AssistantPrompt")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("assistantprompt");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("subject");

                    b.Property<string>("SystemPrompt")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("systemprompt");

                    b.HasKey("PromptID")
                        .HasName("pk_prompt");

                    b.ToTable("prompt", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Settings", b =>
                {
                    b.Property<int>("SettingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("settingsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingsID"));

                    b.Property<int?>("ChatModelID")
                        .HasColumnType("integer")
                        .HasColumnName("chatmodelid");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("text")
                        .HasColumnName("emailpassword");

                    b.Property<string>("EmailUserName")
                        .HasColumnType("text")
                        .HasColumnName("emailusername");

                    b.Property<int?>("EmbeddingModelID")
                        .HasColumnType("integer")
                        .HasColumnName("embeddingmodelid");

                    b.Property<string>("FromDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("fromdisplayname");

                    b.Property<string>("FromEmailName")
                        .HasColumnType("text")
                        .HasColumnName("fromemailname");

                    b.Property<string>("OpenAIKey")
                        .HasColumnType("text")
                        .HasColumnName("openaikey");

                    b.Property<string>("OpenAIOrganization")
                        .HasColumnType("text")
                        .HasColumnName("openaiorganization");

                    b.Property<string>("SMTPHost")
                        .HasColumnType("text")
                        .HasColumnName("smtphost");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("integer")
                        .HasColumnName("smtpport");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("boolean")
                        .HasColumnName("usessl");

                    b.Property<bool>("UseStartTls")
                        .HasColumnType("boolean")
                        .HasColumnName("usestarttls");

                    b.HasKey("SettingsID")
                        .HasName("pk_settings");

                    b.HasIndex("ChatModelID")
                        .HasDatabaseName("ix_settings_chatmodelid");

                    b.HasIndex("EmbeddingModelID")
                        .HasDatabaseName("ix_settings_embeddingmodelid");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.SimilarContentArticlesResult", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("articlecontent")
                        .HasColumnType("text")
                        .HasColumnName("articlecontent");

                    b.Property<string>("articlename")
                        .HasColumnType("text")
                        .HasColumnName("articlename");

                    b.Property<int?>("articlesequence")
                        .HasColumnType("integer")
                        .HasColumnName("articlesequence");

                    b.Property<char>("articletype")
                        .HasColumnType("character(1)")
                        .HasColumnName("articletype");

                    b.Property<double>("cosine_distance")
                        .HasColumnType("double precision")
                        .HasColumnName("cosine_distance");

                    b.HasKey("id")
                        .HasName("pk_similarcontentarticlesresult");

                    b.ToTable("similarcontentarticlesresult", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tagid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .HasColumnType("text")
                        .HasColumnName("tagname");

                    b.HasKey("TagId")
                        .HasName("pk_tag");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.UsedKnowledge", b =>
                {
                    b.Property<int>("UsedKnowledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usedknowledgeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsedKnowledgeId"));

                    b.Property<int?>("ArticleDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("articledetailid");

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chatid");

                    b.Property<int>("ChunkSize")
                        .HasColumnType("integer")
                        .HasColumnName("chunksize");

                    b.Property<int?>("CodeObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("codeobjectid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("fileid");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<int?>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("filesize");

                    b.Property<Guid>("ID")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("RealFileName")
                        .HasColumnType("text")
                        .HasColumnName("realfilename");

                    b.Property<double>("cosinedistance")
                        .HasColumnType("double precision")
                        .HasColumnName("cosinedistance");

                    b.HasKey("UsedKnowledgeId")
                        .HasName("pk_usedknowledge");

                    b.HasIndex("ArticleDetailId")
                        .HasDatabaseName("ix_usedknowledge_articledetailid");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_usedknowledge_chatid");

                    b.HasIndex("CodeObjectId")
                        .HasDatabaseName("ix_usedknowledge_codeobjectid");

                    b.ToTable("usedknowledge", (string)null);
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.WebSiteData", b =>
                {
                    b.Property<int>("WebSiteDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("websitedataid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebSiteDataId"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("URL")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("WebSiteDataId")
                        .HasName("pk_websitedata");

                    b.ToTable("websitedata", (string)null);
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.Property<Guid>("RolesID")
                        .HasColumnType("uuid")
                        .HasColumnName("rolesid");

                    b.Property<Guid>("UsersID")
                        .HasColumnType("uuid")
                        .HasColumnName("usersid");

                    b.HasKey("RolesID", "UsersID")
                        .HasName("pk_permissionpolicyrolepermissionpolicyuser");

                    b.HasIndex("UsersID")
                        .HasDatabaseName("ix_permissionpolicyrolepermissionpolicyuser_usersid");

                    b.ToTable("permissionpolicyrolepermissionpolicyuser", (string)null);
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase");

                    b.HasDiscriminator().HasValue("PermissionPolicyRole");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CodeObjectTag", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.CodeObject", null)
                        .WithMany()
                        .HasForeignKey("CodeObjectsCodeObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codeobjecttag_codeobject_codeobjectscodeobjectid");

                    b.HasOne("DocGPT.Module.BusinessObjects.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codeobjecttag_tag_tagstagid");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("ActionPermissions")
                        .HasForeignKey("RoleID")
                        .HasConstraintName("fk_permissionpolicyactionpermissionobject_permissionpolicyrole~");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("TypePermissionObjectID")
                        .HasConstraintName("fk_permissionpolicymemberpermissionsobject_permissionpolicytyp~");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("NavigationPermissions")
                        .HasForeignKey("RoleID")
                        .HasConstraintName("fk_permissionpolicynavigationpermissionobject_permissionpolicy~");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("ObjectPermissions")
                        .HasForeignKey("TypePermissionObjectID")
                        .HasConstraintName("fk_permissionpolicyobjectpermissionsobject_permissionpolicytyp~");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("TypePermissions")
                        .HasForeignKey("RoleID")
                        .HasConstraintName("fk_permissionpolicytypepermissionobject_permissionpolicyroleba~");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissionpolicyuserlogininfo_permissionpolicyuser_userfore~");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ArticleDetail", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.Article", "Article")
                        .WithMany("ArticleDetail")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_articledetail_article_articleid");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Chat", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.ChatModel", "ChatModel")
                        .WithMany()
                        .HasForeignKey("ChatModelID")
                        .HasConstraintName("fk_chat_chatmodel_chatmodelid");

                    b.HasOne("DocGPT.Module.BusinessObjects.Prompt", "Prompt")
                        .WithMany()
                        .HasForeignKey("PromptID")
                        .HasConstraintName("fk_chat_prompt_promptid");

                    b.Navigation("ChatModel");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.CodeObject", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.CodeObjectCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CodeObjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codeobject_codeobjectcategory_codeobjectcategoryid");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.FileSystemStoreObject", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.Base.FileSystemStoreObjectBase", "File")
                        .WithMany()
                        .HasForeignKey("FileID")
                        .HasConstraintName("fk_filesystemstoreobject_filesystemstoreobjectbase_fileid");

                    b.Navigation("File");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Settings", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.ChatModel", "ChatModel")
                        .WithMany()
                        .HasForeignKey("ChatModelID")
                        .HasConstraintName("fk_settings_chatmodel_chatmodelid");

                    b.HasOne("DocGPT.Module.BusinessObjects.EmbeddingModel", "EmbeddingModel")
                        .WithMany()
                        .HasForeignKey("EmbeddingModelID")
                        .HasConstraintName("fk_settings_embeddingmodel_embeddingmodelid");

                    b.Navigation("ChatModel");

                    b.Navigation("EmbeddingModel");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.UsedKnowledge", b =>
                {
                    b.HasOne("DocGPT.Module.BusinessObjects.ArticleDetail", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleDetailId")
                        .HasConstraintName("fk_usedknowledge_articledetail_articledetailid");

                    b.HasOne("DocGPT.Module.BusinessObjects.Chat", "Chat")
                        .WithMany("UsedKnowledge")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usedknowledge_chat_chatid");

                    b.HasOne("DocGPT.Module.BusinessObjects.CodeObject", "Code")
                        .WithMany()
                        .HasForeignKey("CodeObjectId")
                        .HasConstraintName("fk_usedknowledge_codeobject_codeobjectid");

                    b.Navigation("Article");

                    b.Navigation("Chat");

                    b.Navigation("Code");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissionpolicyrolepermissionpolicyuser_permissionpolicyro~");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissionpolicyrolepermissionpolicyuser_permissionpolicyus~");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Navigation("ActionPermissions");

                    b.Navigation("NavigationPermissions");

                    b.Navigation("TypePermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Navigation("MemberPermissions");

                    b.Navigation("ObjectPermissions");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Article", b =>
                {
                    b.Navigation("ArticleDetail");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.Chat", b =>
                {
                    b.Navigation("UsedKnowledge");
                });

            modelBuilder.Entity("DocGPT.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
